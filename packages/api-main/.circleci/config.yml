version: 2
jobs:
    build:
        docker:
            - image: circleci/node:10
        working_directory: ~/repo

        steps:
            - checkout
            # Download and cache dependencies
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "package.json" }}
                      # fallback to using the latest cache if no exact match is found
                      - v1-dependencies-
            - run: yarn install
            - save_cache:
                  paths:
                      - node_modules
                  key: v1-dependencies-{{ checksum "package.json" }}
            - run:
                  name: Build kubernetes config for cron jobs
                  command: |
                      node createJobsFromTemplate.js
            - persist_to_workspace:
                  root: .
                  paths:
                      - generated_jobs.yml

    build_image_and_push:
        docker:
            - image: google/cloud-sdk
        environment:
            - PROJECT_NAME: 'backend'
            - NAMESPACE: 'web'
            - GOOGLE_PROJECT_ID: 'slugin'
            - GOOGLE_COMPUTE_ZONE: 'europe-north1-a'
            - GOOGLE_CLUSTER_NAME: 'slugin-1'
        steps:
            - checkout
            - run:
                  name: Setup Google Cloud SDK
                  command: |
                      apt-get install -qq -y gettext
                      echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
                      gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
                      gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
                      gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
                      gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
            - setup_remote_docker
            - run:
                  name: Docker build and push
                  command: |
                      docker build \
                        --build-arg COMMIT_REF=${CIRCLE_SHA1} \
                        --build-arg BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”` \
                        -t ${PROJECT_NAME} .
                      docker tag ${PROJECT_NAME} eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}
                      gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://eu.gcr.io
                      docker push eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}
            - run:
                  name: Save image name to file
                  command: |
                      echo "eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}" > docker_image_name
            - persist_to_workspace:
                  root: .
                  paths:
                      - docker_image_name

    deploy_api:
        docker:
            - image: google/cloud-sdk
        environment:
            - PROJECT_NAME: 'backend'
            - NAMESPACE: 'web'
            - GOOGLE_PROJECT_ID: 'slugin'
            - GOOGLE_COMPUTE_ZONE: 'europe-north1-a'
            - GOOGLE_CLUSTER_NAME: 'slugin-1'
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Setup Google Cloud SDK
                  command: |
                      apt-get install -qq -y gettext
                      echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
                      gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
                      gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
                      gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
                      gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
            - setup_remote_docker
            - run:
                  name: Deploy to Kubernetes
                  command: |
                      export DOCKER_IMAGE=`cat ./docker_image_name`
                      envsubst < ${HOME}/project/kubernetes/api.yml > ${HOME}/patched_k8s.yml
                      kubectl apply -f ${HOME}/patched_k8s.yml
                      kubectl rollout status sts/${PROJECT_NAME} --namespace ${NAMESPACE}

    deploy_crons:
        docker:
            - image: google/cloud-sdk
        environment:
            - NAMESPACE: 'web'
            - GOOGLE_PROJECT_ID: 'slugin'
            - GOOGLE_COMPUTE_ZONE: 'europe-north1-a'
            - GOOGLE_CLUSTER_NAME: 'slugin-1'
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Setup Google Cloud SDK
                  command: |
                      apt-get install -qq -y gettext
                      echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
                      gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
                      gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
                      gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
                      gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
            - run:
                  name: Deploy to Kubernetes
                  command: |
                      export DOCKER_IMAGE=`cat ./docker_image_name`
                      envsubst < ${HOME}/project/generated_jobs.yml > ${HOME}/patched_k8s.yml
                      kubectl apply -f ${HOME}/patched_k8s.yml

workflows:
    version: 2
    build_deploy:
        jobs:
            - build:
                  filters:
                      branches:
                          only: master
            - build_image_and_push:
                  requires:
                      - build
                  filters:
                      branches:
                          only: master
            - deploy_api:
                  requires:
                      - build_image_and_push
                  filters:
                      branches:
                          only: master
            - deploy_crons:
                  requires:
                      - build_image_and_push
                  filters:
                      branches:
                          only: master
